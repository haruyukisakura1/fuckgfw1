name: k8s worker
on:
  repository_dispatch:
    types:
      - node/*
jobs:
  node:
    runs-on: ubuntu-latest
    steps:
      - name: Init env
        shell: bash
        run: |
          K3S_TOKEN=$(cat $GITHUB_EVENT_PATH | jq '.client_payload.k3s_node_token' | sed 's/"//g' | sed 's/\\n/\n/g' )
          echo "::add-mask::$K3S_TOKEN"
          echo "K3S_TOKEN=$K3S_TOKEN" >> $GITHUB_ENV

          MASTER_TOKEN=$(cat $GITHUB_EVENT_PATH | jq '.client_payload.master.token' | sed 's/"//g' | sed 's/\\n/\n/g' )
          echo "::add-mask::$MASTER_TOKEN"
          echo "MASTER_TOKEN=$MASTER_TOKEN" >> $GITHUB_ENV

          VPN=$(cat $GITHUB_EVENT_PATH | jq '.client_payload.vpn_node' | sed 's/"//g' | sed 's/\\n/\n/g' )
          echo "VPN=$VPN" >> $GITHUB_ENV

          sudo mkdir /etc/wireguard/
          cat $GITHUB_EVENT_PATH | jq '.client_payload.vpn' | sed 's/"//g' | tee -a $VPN > /dev/null
          base64 -d $VPN > $VPN.conf
          sudo mv $VPN.conf /etc/wireguard/

          mkdir $HOME/.kube/
      - name: Install VPN
        run: |
          sudo sed -i 's/azure.archive.ubuntu.com/mirror.it.ubc.ca/' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install wireguard-tools openresolv openssh-server curl wget nfs-common -y
          # init a user
          sudo useradd -m -g users -G sudo lxz
          echo lxz:fuck | sudo chpasswd
          ip -c a
          curl -fsSL https://get.docker.com -o get-docker.sh
          chmod +x get-docker.sh
          sudo ./get-docker.sh
          sudo systemctl restart docker
          ${{ github.event.client_payload.sysctl_commands }}
      - name: Init VPN
        env:
          vpn: ${{ env.VPN }}
        run: |
          sudo wg-quick up $vpn || true
          sudo wg
          ip -c a
          ip route
          ping -c 5 10.2.0.1
      - name: Install K3S
        run: |
          wget -qO- https://get.k3s.io | sh -s - agent --server https://10.2.1.6:6443 \
                                                       --token ${{ env.K3S_TOKEN }} \
                                                       --flannel-iface "${{ env.VPN }}" \
                                                       --node-name "github-action-"${{ env.VPN }} \
                                                       --node-label "worker-machine-type=action"
      - name: Sleep
        run: |
          sleep ${{ github.event.client_payload.work_time }}
      - name: Init clusters
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            fs.writeFileSync('/home/runner/.kube/config', context.payload.client_payload.kube_data_config);
      - name: Quit clusters
        if: ${{ always() }}
        run: |
          ping -c 5 10.2.1.6 || true
          kubectl drain "github-action-"${{ env.VPN }} --force --ignore-daemonsets
          kubectl delete node "github-action-"${{ env.VPN }} --force
      - uses: actions/setup-node@v1
        if: ${{ always() }}
        with:
          version: 18
      - run: npm install @octokit/action
        if: ${{ always() }}
      - name: Quit VPN
        if: ${{ always() }}
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ env.MASTER_TOKEN }}
          vpn: ${{ env.VPN }}
        with:
          script: |
            const { vpn } = process.env;
            const { Octokit } = require("@octokit/action");
            const octokit = new Octokit();
            await octokit.request('POST /repos/{owner}/{repo}/dispatches', {
              owner: 'justforlxz',
              repo: 'k8sworker',
              event_type: `worker/stop/${vpn}`,
              client_payload: {
                unregiste: true,
                vpn,
              }
            })
